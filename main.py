import asyncio
import json
import os
import requests
from io import BytesIO

from telethon import TelegramClient, events, Button
from telethon.tl.types import InputUserSelf
from telethon.tl.tlobject import TLObject

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
group_id = int(os.getenv("GROUP_ID"))

client = TelegramClient("bot_session", api_id, api_hash).start(bot_token=bot_token)

approved_users = set()
try:
    with open("approved_users.json", "r") as f:
        approved_users = set(json.load(f))
except FileNotFoundError:
    approved_users = set()

# === –ö–∞—Å—Ç–æ–º–Ω—ã–π TL-–∑–∞–ø—Ä–æ—Å
class GetUserStarGiftsRequest(TLObject):
    QUALNAME = "payments.getUserStarGifts"
    __slots__ = ["user_id", "offset", "limit"]

    def __init__(self, *, user_id, offset, limit):
        self.user_id = user_id
        self.offset = offset
        self.limit = limit

    def write(self):
        b = BytesIO()
        b.write(b'\xaf\x36\xb0\xf8')  # Constructor ID
        self.user_id.write(b)
        b.write(b'\x00')  # offset: empty string
        b.write(self.limit.to_bytes(4, 'little', signed=True))
        return b.getvalue()

    @staticmethod
    def read(b):
        pass  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º—ã –Ω–µ —á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø—Ä—è–º—É—é

# === –ö–æ–º–∞–Ω–¥–∞ /start
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    user = await event.get_sender()
    welcome = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—é, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è 6 –ø–æ–¥–∞—Ä–∫–æ–≤ Jack-in-the-Box –º–æ–¥–µ–ª–∏ Knockout.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    await event.respond(welcome, buttons=[Button.inline("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", b"check")])

# === –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
@client.on(events.CallbackQuery)
async def check(event):
    if event.data != b"check":
        return

    user_id = event.sender_id

    try:
        gifts = await client._invoke(GetUserStarGiftsRequest(
            user_id=InputUserSelf(),
            offset="",
            limit=100
        ))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        await event.respond("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã.")
        return

    # –ì—Ä—É–±—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    try:
        raw = gifts.getvalue()
        raw_text = raw.decode('utf-8', errors='ignore').lower()
    except:
        await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç.")
        return

    count = raw_text.count("jack") if "knockout" in raw_text else 0

    if count >= 6:
        if user_id not in approved_users:
            approved_users.add(user_id)
            with open("approved_users.json", "w") as f:
                json.dump(list(approved_users), f)

        try:
            r = requests.get(
                f"https://api.telegram.org/bot{bot_token}/createChatInviteLink",
                params={"chat_id": group_id, "member_limit": 1}
            )
            invite_link = r.json()["result"]["invite_link"]
            await event.respond(f"‚úÖ –£ —Ç–µ–±—è –µ—Å—Ç—å 6 –ø–æ–¥–∞—Ä–∫–æ–≤! –í–æ—Ç —Å—Å—ã–ª–∫–∞: {invite_link}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∏: {e}")
            await event.respond("‚úÖ –ü–æ–¥–∞—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É.")
    else:
        await event.respond("‚ùå –ü–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –∫—É–ø–∏ –Ω–∞ @mrkt.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
client.run_until_disconnected()
