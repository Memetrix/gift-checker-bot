import asyncio
from telethon import TelegramClient, events, functions, types, Button
import json, requests, os

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
group_id = int(os.getenv("GROUP_ID"))

client = TelegramClient("bot_session", api_id, api_hash)
client.start(bot_token=bot_token)

approved_users = set()
try:
    with open("approved_users.json", "r") as f:
        approved_users = set(json.load(f))
except FileNotFoundError:
    approved_users = set()

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    user = await event.get_sender()
    welcome = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è 6 –ø–æ–¥–∞—Ä–∫–æ–≤ Jack-in-the-Box –º–æ–¥–µ–ª–∏ Knockout. "
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å."
    )
    await event.respond(welcome, buttons=[Button.inline("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", b"check")])

@client.on(events.CallbackQuery)
async def check(event):
    if event.data != b"check":
        return

    user_id = event.sender_id
    try:
        result = await client(functions.payments.GetUserStarGiftsRequest(
            user_id=await event.get_input_sender(),
            offset="",
            limit=100
        ))
    except Exception as e:
        await event.respond("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Å–∫—Ä—ã–ª–∏ –ø–æ–¥–∞—Ä–∫–∏.")
        print(e)
        return

    count = 0
    for gift in result.gifts:
        try:
            title = getattr(gift.gift, "title", "").lower()
            if "jack" in title and "knockout" in title:
                count += 1
        except:
            continue

    if count >= 6:
        if user_id not in approved_users:
            approved_users.add(user_id)
            with open("approved_users.json", "w") as f:
                json.dump(list(approved_users), f)
        try:
            r = requests.get(f"https://api.telegram.org/bot{bot_token}/createChatInviteLink",
                             params={"chat_id": group_id, "member_limit": 1})
            invite_link = r.json()["result"]["invite_link"]
            await event.respond(f"‚úÖ –£ —Ç–µ–±—è –µ—Å—Ç—å 6 –ø–æ–¥–∞—Ä–∫–æ–≤! –í–æ—Ç —Å—Å—ã–ª–∫–∞: {invite_link}")
        except Exception as e:
            print(e)
            await event.respond("‚úÖ –ü–æ–¥–∞—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É.")
    else:
        await event.respond("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–ª–∏ –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –∫—É–ø–∏ –Ω–∞ @mrkt.")

async def periodic_check():
    while True:
        for user_id in list(approved_users):
            try:
                result = await client(functions.payments.GetUserStarGiftsRequest(
                    user_id=await client.get_input_entity(user_id),
                    offset="",
                    limit=100
                ))
                count = 0
                for gift in result.gifts:
                    title = getattr(gift.gift, "title", "").lower()
                    if "jack" in title and "knockout" in title:
                        count += 1
                if count < 6:
                    requests.get(f"https://api.telegram.org/bot{bot_token}/banChatMember",
                                 params={"chat_id": group_id, "user_id": user_id})
                    requests.get(f"https://api.telegram.org/bot{bot_token}/unbanChatMember",
                                 params={"chat_id": group_id, "user_id": user_id})
                    approved_users.remove(user_id)
                    with open("approved_users.json", "w") as f:
                        json.dump(list(approved_users), f)
                    await client.send_message(user_id, "üö´ –£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤, –¥–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await asyncio.sleep(86400)

client.loop.create_task(periodic_check())
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
client.run_until_disconnected()
